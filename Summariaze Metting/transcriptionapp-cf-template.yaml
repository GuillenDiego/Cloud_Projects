AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create an S3 bucket and register a Lambda function on event notification

Resources:
  SummarizeMeetingRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      RoleName: 'summarize-meeting-role-5'
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Service: 
                - 'lambda.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonTranscribeFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
      Tags:
        - Key: 'app'
          Value: 'meeting-summarizer'
        - Key: 'name'
          Value: 'summarize-meeting-role'

  MeetingSummarizerFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'meeting-summarizer-5'
      Handler: 'index.lambda_handler'
      Runtime: 'python3.12'
      Role: !GetAtt SummarizeMeetingRole.Arn
      Code:
        ZipFile: |
          import boto3
          import uuid
          import json

          def lambda_handler(event, context):
              print(json.dumps(event))
              
              record = event['Records'][0]
              
              s3bucket = record['s3']['bucket']['name']
              s3object = record['s3']['object']['key']
              
              s3Path = f's3://{s3bucket}/{s3object}'
              jobName = f'{s3object}--{str(uuid.uuid4())}'
              outputKey = f'transcripts/{s3object}-transcript.json'
              
              client = boto3.client('transcribe')
              
              response = client.start_transcription_job(
                  TranscriptionJobName=jobName,
                  LanguageCode='en-US',
                  Media={'MediaFileUri': s3Path},
                  OutputBucketName=s3bucket,
                  OutputKey=outputKey
              )
              
              print (json.dumps(response, default=str))
              
              return {
                  'TranscriptionJobName': response['TranscriptionJob']['TranscriptionJobName']
              }
      MemorySize: 128
      Timeout: 60
      Tags:
        - Key: 'app'
          Value: 'meeting-summarizer'
        - Key: 'name'
          Value: 'meeting-summarizer-function'

  RecordingS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'recordings-summarizer-bucket-5${AWS::AccountId}'
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Filter: 
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .mp3
            Function: !GetAtt MeetingSummarizerFunction.Arn

  S3BucketLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt MeetingSummarizerFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt RecordingS3Bucket.Arn

Outputs:
  BucketName:
    Value: !Ref RecordingS3Bucket
    Description: Name of the S3 bucket created for meeting summarization.
  LambdaFunctionName:
    Description: 'Name of the Lambda function created for meeting summarization'
    Value: !Ref MeetingSummarizerFunction
  LambdaFunctionArn:
    Description: 'ARN of the Lambda function created for meeting summarization'
    Value: !GetAtt MeetingSummarizerFunction.Arn
